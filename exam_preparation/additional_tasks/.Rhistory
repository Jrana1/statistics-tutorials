cars %>% View()
library(tidyverse)
cars %>% View()
cars %>% slice(1:5)
cars %>% slice(1:5)
getwd()
melonoma
library(tidyverse)
library(TeachingDemos)
df
df<-read_csv('http://localhost:8888/edit/solutions/KLWS19/class.data.csv')
df
setwd('/home/jrana/newHome/statistics/solutions/KLWS19')
df<-read_csv('class.data.csv')
df
df<-read_csv('class.data.csv') %>% as_tibble()
df
df<-read_csv2('class.data.csv') %>% as_tibble()
df
df %>% slice(1:10)
# Specify the type and scale for all variables in the dataset.
names(df)
df %>% mutate(
height= (height*2.54)/1000,
weight=weight*0.45
)->df
df %>% slice(1:10)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi <  24.5)~'normalweight',
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)->df
)
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df
names(df)
str(df)
df %>% slice(1:5)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)->df
df %>% slice(1:10)
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
# Import the csv file into a tibble class.data. Use the R function read_cvs2() to do this.
df<-read_csv2('class.data.csv') %>% as_tibble()
df %>% slice(1:10)
# Specify the type and scale for all variables in the dataset.
names(df)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)->df
df %>% slice(1:10)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df %>% slice(1:5)
df %>% group_by(gender) %>% summarise(
mean=mean(height),
sd=sd(height),
min=min(height),
max=max(height),
q1=quantile(height,0.25,type=1),
q2=quantile(height,0.5,type=1)
q3=quantile(height,0.75,type=1)
df %>% group_by(gender) %>% summarise(
mean=mean(height),
sd=sd(height),
min=min(height),
max=max(height),
q1=quantile(height,0.25,type=1),
q2=quantile(height,0.5,type=1),
q3=quantile(height,0.75,type=1),
IQR=IQR(height)
)
boxplot(df$height~df$gender)
boxplot(df$height~df$gender,horizontal = T
,)
boxplot(df$height~df$gender,horizontal = T
,xlab = 'height',ylab = 'gender')
names(df)
help(hist)
hist(bmi,break=c( min(df$bmi,18.5,24.5,30,max(bmi)) ))
hist(bmi,break=c( min(df$bmi),18.5,24.5,30,max(bmi) ))
hist(bmi,break=c( min(df$bmi),18.5,24.5,30,max(bmi) )
hist(bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(bmi) ))
hist(bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(df$bmi) ))
hist(df$bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(df$bmi) ))
cor(df$weight,df$height)
plot(df$weight,df$height)
# lm(y~x) wir wollen y vermuten. oder y ist Target variable
# lm(x~y) wir wollen x vermuten. oder x ist Target variable
lm(df$weight~df$height)
# lm(y~x) wir wollen y vermuten. oder y ist Target variable
# lm(x~y) wir wollen x vermuten. oder x ist Target variable
model<-lm(df$weight~df$height)
model
model$coefficients
a<-model$coefficients[1]
b<-model$coefficients[2]
a;b
heigh<-1.3
weight = a + b*height
height<-1.3
weight = a + b*height
weight
plot(df$weight,df$height)
abline(a,b)
abline(lm(model))
abline(lm(df$weight~df$height))
plot(df$weight,df$height)
abline(lm(df$weight~df$height))
abline(lm(df$weight~df$height))
dev.off()
plot(df$weight,df$height)
abline(lm(df$weight~df$height))
abline(model)
abline(model,col='red')
plot(df$weight,df$height,xlab = 'x')
plot(df$weight,df$height)
abline(model,col='red')
a;b
table(df$gender,df$bmi.category)
table(df$gender,df$bmi.category)
table(df$gender,df$bmi.category) %>% addmargins()
table(df$gender,df$bmi.category) %>% addmargins()
plot(c(1:30),dnorm(1:30,mean=123,sd=15))
plot(c(1:30),dnorm(1:30,mean=123,sd=15))
plot(seq(-1,10,1),dnorm(1:30,mean=123,sd=15))
plot(seq(-1,10,1),dnorm(seq(-1,10,1),mean=123,sd=15))
# mitte -> 0.95
# linke + rechte seite 0.05
# linke seite 0.05/2
# rechte seite 0.05/2
# für lower bound
qnorm(0.05/2,mean=123,sd=15)
upper_bound<-qnorm(0.05/2+0.95,mean=123,sd=15)
lower_bound;upper_bound
# mitte -> 0.95
# linke + rechte seite 0.05
# linke seite 0.05/2
# rechte seite 0.05/2
# für lower bound
lower_bound<-qnorm(0.05/2,mean=123,sd=15)
upper_bound<-qnorm(0.05/2+0.95,mean=123,sd=15)
lower_bound;upper_bound
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123,sd=15)
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=15*4)
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=sqrt(15*4))
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=(15*4))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
getwd()
setwd('/home/jrana/')
exp <- 1000*p
knitr::opts_chunk$set(echo = TRUE)
x<-c(1:20)
boxplot(x)
# d)
1-pnorm(100, 10, 20)
# e)
qnorm(0.9, 20, 20
# d)
1-pnorm(100, 10, 20)
# e)
qnorm(0.9, 20, 20)
# a) more than 40 students sign up for saturday
# X ~ B(n=100, p=1/3): P(X>=40)
1-pbinom(39, size=100, prob=0.5)
factorial(100)*(0.4)^(30)*(0.5)^(50)*(0.1)^(20)/
(factorial(30)*factorial(50)*factorial(20))
# d) The room for the ceremony has 80 places. What is maximum number graduating
#    students if the probability that the room is big enough is 0.9?
# Saturday has the highest preferences, i.e. we consider Y ~ B(n,0.5) and
# P(Y <= 80) = 0.9, Since Y is approximately N(0.5n, 0.25n), 80 is the 90%
# quantile of N(0.5n, 0.25n):
# 0.5*n + qnorm(0.9) * 0.5 sqrt(n) = 80
# n + qnorm(0.9) * sqrt(n) = 160
# u=sqrt(n): u^2 + qnorm(0.9) * u - 160 = 0
# u1 = 0.5*qnorm(0.9) - sqrt((0.5*qnorm(0.9)^2)+160) < 0
# u2 = 0.5*qnorm(0.9) + sqrt((0.5*qnorm(0.9)^2)+160)
(0.5*qnorm(0.9) + sqrt((0.5*qnorm(0.9)^2)+160))^2
# a) What is the probability that the turnover of 100 customers ist at least 300 Euro?
# X = value of an order
p.x <- c(0.2, 0.4, 0.25, 0.15)
value.x <- c(3,4,2,2.5)
EX <- sum(p.x * value.x)
EX2 <- sum(p.x * value.x^2)
VarX <- EX2-EX^2
EX
EX2
VarX
EX2
VarX
# turnover approximately N(100*EX,100*VarX) distributed: P(X>=300)
1-pnorm(300, mean = 100*EX, sd = sqrt(100*VarX))
# b) What is maximum amount of the turnover of 100 customers, which will be achieved
#    with a probaility of 0.95?
# P(X <= maxT) =.95
qnorm(0.95, mean=100*EX, sd=sqrt(100*VarX))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
boxplot(x=c(1:30))
boxplot(x=c(1:30),horizontal = T,col='blue')
boxplot(x=c(1:30),horizontal = T,col='blue',xlab='age')
x<-c(1,3,9,10)
y<-c('a','b','c','d')
barplot(x,y)
x<-c(1,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y)
x<-c(1,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y,col = 'blue')
x<-c(11,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y,col = 'blue')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# this is a comment
plot(pressure)
# aufgabe(a)
# statement
boxplot(x=c(1:30),horizontal = T,col='blue',xlab='age')
# this was a boxplot
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# this is a comment
plot(pressure)
# aufgabe(a)
# statement
boxplot(x=c(1:30),horizontal = T,col='blue',xlab='age')
# this was a boxplot
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# this is a comment
plot(pressure)
# aufgabe(a)
# statement
boxplot(x=c(1:30),horizontal = T,col='blue',xlab='age')
# this was a boxplot
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# this is a comment
plot(pressure)
# aufgabe(a)
# statement
boxplot(x=c(1:30),horizontal = T,col='blue',xlab='age')
# this was a boxplot
x<-c(11,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y,col = 'blue')
x<-c(11,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y,col = 'blue')
x<-c(11,3,9,10)
y<-c('a','b','c','d')
barplot(x,names.arg = y,col = 'blue')
getwd()
getwd()
setwd('/home/jrana/newHome/statistics/exam_preparation/additional_tasks')
getwd()
library(tidyverse)
df<-read.csv('corona.csv') %>% as_tibble()
library(tidyverse)
df<-read_csv('corona.csv') %>% as_tibble()
library(tidyverse)
setwd('/home/jrana/newHome/statistics/exam_preparation/additional_tasks')
df<-read_csv('corona.csv') %>% as_tibble()
df %>% slice(1:5)
df %>% slice(1:5)
df %>% select(continent) %>% count()
df %>% select(continent) %>% count(continent)
df %>% group_by(continent) %>% summarise(mean_death=mean(new_deaths))
df
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
boxplot(c(1:20))
table1 %>% slice(1:5)
library(tidyverse)
table1 %>% slice(1:5)
getwd()
getwd()
setwd('/home/jrana/newHome/statistics/exam_preparation/additional_tasks')
# import data
df<-read_csv('corona.csv') %>% as_tibble()
df %>% slice(1:5)
names(df)
## continent, location -> qualitative, nonimal
## year, month, day->  quantitative, interval
# new cases and new deaths: october, germany
str(df)
## continent, location -> qualitative, nonimal
## year, month, day->  quantitative, interval
# (c) new cases and new deaths: october, germany
df %>% filter(month==10 & location='Germany')
## continent, location -> qualitative, nonimal
## year, month, day->  quantitative, interval
# (c) new cases and new deaths: october, germany
df %>% filter(month==10 & location=='Germany')
## continent, location -> qualitative, nonimal
## year, month, day->  quantitative, interval
# (c) new cases and new deaths: october, germany
df %>% filter(month==10 & location=='Germany') %>% select(new_cases,new_deaths)
df %>% group_by(location,month) %>% summarise(new_cases=sum(new_cases),new_deaths=sum(new_deaths))
df %>% group_by(location,month) %>% summarise(
mean=mean(new_cases)
)
df %>% group_by(month) %>% summarise(
mean_cases=mean(new_cases),
mean_death=mean(new_deaths)
)
df %>% group_by(month) %>% summarise(
mean_cases=mean(new_cases,na.rm = T),
mean_death=mean(new_deaths,na.rm=T)
)
df %>% filter(location == "Germany" & year == 2020) %>%
select(month, day, new_cases, population) %>%
arrange(month, day) %>%
mutate(inz = new_cases+lag(new_cases,n=1)+lag(new_cases,n=2)+lag(new_cases,n=3)+
lag(new_cases,n=4)+lag(new_cases,n=5)+lag(new_cases,n=6),
inz.100000 = inz *100000/population,
i = 1,
day = 22+cumsum(i)) %>%
select(day, inz.100000) -> inz.data
plot(y = inz.data$inz.100000, x = inz.data$day, type = "l",
main = "7 Tages Inzidenzen in Deutschland",
xlab = "Tag", ylab = "Inzidenz")
df %>% filter(location == "Germany" & year == 2020) %>%
select(month, day, new_cases, population) %>%
arrange(month, day) %>%
mutate(inz = new_cases+lag(new_cases,n=1)+lag(new_cases,n=2)+lag(new_cases,n=3)+
lag(new_cases,n=4)+lag(new_cases,n=5)+lag(new_cases,n=6),
inz.100000 = inz *100000/population,
i = 1,
day = 22+cumsum(i)) %>%
select(day, inz.100000) -> inz.data
inz.data
plot(y = inz.data$inz.100000, x = inz.data$day, type = "l",
main = "7 Tages Inzidenzen in Deutschland",
xlab = "Tag", ylab = "Inzidenz")
plot(y = inz.data$inz.100000, x = inz.data$day, type = "l",
main = "7 Tages Inzidenzen in Deutschland",
xlab = "Tag", ylab = "Inzidenz")
#Linear regression new deaths = a + b * new cases in Germany
#(a) Parameter a, b
#(b) Scatterplot
#(c) Coefficient of correlation, coefficient of determination
#(d) Prediction for 20000 new cases
#(e) Interpretation of the coefficients
#(a)
model<-lm(df$new_deaths~df$new_cases)
a<-model$coefficients[1]
b<-model$coefficients[2]
a;b
#(b)
plot(df$new_deaths,df$new_cases)
#(b)
plot(df$new_deaths,df$new_cases)
#(b)
plot(df$new_deaths,df$new_cases)
#(b)
plot(df$new_deaths,df$new_cases)
df$continent %>% unique()
boxplot(df$new_cases~df$continent)
#(b)
plot(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases,use = "complete.obs")
#Linear regression new deaths = a + b * new cases in Germany
#(a) Parameter a, b
#(b) Scatterplot
#(c) Coefficient of correlation, coefficient of determination
#(d) Prediction for 20000 new cases
#(e) Interpretation of the coefficients
#(a)
data.ger<-df %>% filter(location=='Germany')
model<-lm(data.ger$new_deaths~data.ger$new_cases)
a<-model$coefficients[1]
b<-model$coefficients[2]
a;b
#(b) scatterplot
plot(df$new_deaths,df$new_cases)
cor(df$new_deaths,df$new_cases)
cor(data.ger$new_deaths,data.ger$new_cases,use = 'complete.obs')
cor(data.ger$new_deaths,data.ger$new_cases)
cor(data.ger$new_deaths,data.ger$new_cases)**2
# #(d) Prediction for 20000 new cases
new_death=a+b*2000
new_death
#(e) Interpretation of the coefficients
a;b
abline(a,b)
plot(data.ger$new_deaths,data.ger$new_cases)
abline(lm(data.ger$new_deaths~data.ger$new_cases))
df2<-read_csv('corona march 2020.csv')
df2<-read_csv('corona_march_2020.csv')
df2 %>% head()
## columns
names(df2)
# not tidy beacuse the columns 1:31 are actually values
# make the dataset tidy
df2 %>%
# mutate
df2 %>% gather(key='day',value='ratio',1:31)
# mutate
df2 %>% gather(key='day',value='ratio',3:31+3)
# mutate
df2 %>% gather(key='day',value='ratio',3:31+3) %>% select(day) %>% max()
# mutate
df2 %>% gather(key='day',value='ratio',3:31+3) %>% select(day) %>% tail()
# mutate
df2 %>% gather(key='day',value='ratio',3:31+3) %>% select(day) %>% unique() %>% tail()
# mutate
df2 %>% gather(key='day',value='ratio',4:31+3) %>%
select(day) %>% unique() %>% tail()
# mutate
df2 %>% gather(key='day',value='ratio',4:31+3)
# mutate
df2 %>% gather(key='day',value='ratio',4:31+3)
# mutate
df2 %>% gather(key='day',value='ratio',4:34)
# mutate
df2 %>% gather(key='day',value='ratio',4:31+4)
# mutate
df2 %>% gather(key='day',value='ratio',4:31+3)
# mutate
df2 %>% gather(key='day',value='ratio',4:34)
# mutate
df2 %>% gather(key='day',value='ratio',4:34) %>%
separate(col='ratio',into = c('new_cases','new_deaths'),sep = '/')
# (a) more than 40 students sign up for saturday
# P(X>=40), X~B(n=100,0.5)
1- pbinom(x=40,size=100,prob = 0.5)
# (a) more than 40 students sign up for saturday
# P(X>=40), X~B(n=100,0.5)
1- pbinom(q =40,size=100,prob = 0.5)
# (a) more than 40 students sign up for saturday
# P(X>=40), X~B(n=100,0.5)
1- pbinom(q = 40,size=100,prob = 0.5)
(factorial(100)*(0.5)**50*(0.4)**30*(0.1)**20)/(factorial(50)*factorial(30)*factorial(20))
# r function
dmultinom(c(50,30,20),size = 100,prob = c(0.5,0.4,0.1))
# c) that the 20th student is first student choosing sunday
(0.5+0.4)**19*0.1

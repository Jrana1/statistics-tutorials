# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Modified from Winston Chang,
# https://shiny.rstudio.com/gallery/shiny-theme-selector.html
# Concepts about Reactive programming used by Shiny,
# https://shiny.rstudio.com/articles/reactivity-overview.html
# Load R packages
library(shiny)
install.packages("shiny")
library(shiny)
library(shinythemes)
library(shiny)
install.packages("shinythemes")
library(shiny)
library(shinythemes)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput("txt1", "Given Name:", ""),
textInput("txt2", "Surname:", ""),
), # sidebarPanel
mainPanel(
h1("Header 1"),
h4("Output 1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel("Title Panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(tidyverse)
c(1:10)
c(1:10) %>% .^2
c(1:10) %>% .*2
c(1:10) %>% .^5
library(tidyverse)
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))  %>%
mutate(prob.score=1/6) %>%
mutate(prob.heads.and.score=prob.score*prob.heads.given.score)%>%
group_by(heads) %>% mutate(prob.heads=sum(prob.heads.and.score)) %>%
select(heads,prob.heads) %>% unique()
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))  %>%
mutate(prob.score=1/6) %>%
mutate(prob.heads.and.score=prob.score*prob.heads.given.score)
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))  %>%
mutate(prob.score=1/6) %>%
mutate(prob.heads.and.score=prob.score*prob.heads.given.score)%>%
group_by(heads) %>% mutate(prob.heads=sum(prob.heads.and.score))
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))  %>%
mutate(prob.score=1/6) %>%
mutate(prob.heads.and.score=prob.score*prob.heads.given.score)%>%
group_by(heads) %>% mutate(prob.heads=sum(prob.heads.and.score)) %>%
select(heads,prob.heads) %>% unique()
tibble(score=rep(1:6,each=7),heads=rep(0:6,length.out=6*7)) %>% group_by(score,heads) %>% mutate(
prob.heads.given.score=sum(dbinom(heads,size=score,prob=0.5)))  %>%
mutate(prob.score=1/6) %>%
mutate(prob.heads.and.score=prob.score*prob.heads.given.score)%>%
group_by(heads) %>% mutate(prob.heads=sum(prob.heads.and.score)) %>%
select(heads,prob.heads) %>% unique()->tmp
tmp
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(-heads.mul.prob.head)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head) %>% select(-heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head,-heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head,-heads)->tmp
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head,-heads)->x
x
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% as_tibble() %>% select(heads.mul.prob.head,-heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% as.tibble() %>% select(heads.mul.prob.head,-heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads) %>% select(heads.mul.prob.head,-heads)
tmp %>% mutate(heads.mul.prob.head=heads*prob.heads)
tmp
type(tmp)
typeof(tmp)
tmp %>% as.tibble()
tmp %>% as.tibble() %>% typeof()
tmp %>% as_tibble() %>% typeof()
tmp$heads.mul.prob.head
tmp$heads.mul.prob.head*tmp$heads
tmp$heads.mul.prob.head*tmp$heads %>% sum()
sum(tmp$heads.mul.prob.head*tmp$heads)
sum(tmp$heads.mul.prob.head)
n<-240
p<-1 - 0.11
Ex<-n*p
num_seats<-22*10
Vx<-n*p(1-p)
n<-240
p<-1 - 0.11
Ex<-n*p
num_seats<-22*10
Vx<-n*p(1-p)
Vx<-n*p*(1-p)
1-pbinom(q = 220,size=n,
prob = p)
1-pnorm(q=220,mean=Ex,sd=sqrt(Vx))
# (b)
library(tidyverse)
tibble( n=220:500,p=pbinom(n,size=n,prob = p) )
tibble( n=220:500,p=pbinom(n,size=n,prob = p) ) %>% filter( p<=1)
tibble( n=220:500,p=pbinom(n,size=n,prob = p) ) %>% filter( p<=0.8)
p
n
tibble( x=220:500,p=pbinom(x,size=n,prob = p) ) %>% filter( p<=0.8)
p
tibble( x=220:250,p=pbinom(x,size=n,prob = p) ) %>% filter( p<=0.8)
tibble( x=220:250,p=pbinom(x,size=n,prob = p) )
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob<=0.99)
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.99)
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.99)
(240*89)/0.99
(240*0.89)/0.99
(240*0.89)/0.99 %>% round(0)
((240*0.89)/0.99) %>% round(0)
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.99)
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.90)
tibble( x=220:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.90)
tibble( x=200:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.90)
tibble( x=200:250,prob=pbinom(x,size=n,prob = p) ) %>% filter(prob>=0.88)
plot(cars)
```{r}
plot(cars)
# this is a comment
```
cars %>% View()
cars %>% View()
library(tidyverse)
cars %>% View()
cars %>% slice(1:5)
cars %>% slice(1:5)
getwd()
melonoma
library(tidyverse)
library(TeachingDemos)
df
df<-read_csv('http://localhost:8888/edit/solutions/KLWS19/class.data.csv')
df
setwd('/home/jrana/newHome/statistics/solutions/KLWS19')
df<-read_csv('class.data.csv')
df
df<-read_csv('class.data.csv') %>% as_tibble()
df
df<-read_csv2('class.data.csv') %>% as_tibble()
df
df %>% slice(1:10)
# Specify the type and scale for all variables in the dataset.
names(df)
df %>% mutate(
height= (height*2.54)/1000,
weight=weight*0.45
)->df
df %>% slice(1:10)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi <  24.5)~'normalweight',
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)->df
)
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df
names(df)
str(df)
df %>% slice(1:5)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)->df
df %>% slice(1:10)
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
# Import the csv file into a tibble class.data. Use the R function read_cvs2() to do this.
df<-read_csv2('class.data.csv') %>% as_tibble()
df %>% slice(1:10)
# Specify the type and scale for all variables in the dataset.
names(df)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)
df %>% mutate(
height= (height*2.54)/100,
weight=weight*0.45
)->df
df %>% slice(1:10)
# Add a new variable bmi to the tibble class.data,
#which contains the “Body Mass Index”. The Body Mass index
#is defined as “weight in kg / (height in m)^2”
df %>% mutate(bmi= weight/(height**2))->df
df %>% slice(1:5)
df %>% mutate(
bmi.category=case_when(
bmi<18.5~'underweight',
(18.5 <= bmi & bmi <  24.5)~'normalweight',
(24.5 <= bmi & bmi < 30)~'overweight',
(bmi > 30)~'obesity'
)
)->df
df %>% slice(1:5)
df %>% group_by(gender) %>% summarise(
mean=mean(height),
sd=sd(height),
min=min(height),
max=max(height),
q1=quantile(height,0.25,type=1),
q2=quantile(height,0.5,type=1)
q3=quantile(height,0.75,type=1)
df %>% group_by(gender) %>% summarise(
mean=mean(height),
sd=sd(height),
min=min(height),
max=max(height),
q1=quantile(height,0.25,type=1),
q2=quantile(height,0.5,type=1),
q3=quantile(height,0.75,type=1),
IQR=IQR(height)
)
boxplot(df$height~df$gender)
boxplot(df$height~df$gender,horizontal = T
,)
boxplot(df$height~df$gender,horizontal = T
,xlab = 'height',ylab = 'gender')
names(df)
help(hist)
hist(bmi,break=c( min(df$bmi,18.5,24.5,30,max(bmi)) ))
hist(bmi,break=c( min(df$bmi),18.5,24.5,30,max(bmi) ))
hist(bmi,break=c( min(df$bmi),18.5,24.5,30,max(bmi) )
hist(bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(bmi) ))
hist(bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(df$bmi) ))
hist(df$bmi,breaks=c( min(df$bmi),18.5,24.5,30,max(df$bmi) ))
cor(df$weight,df$height)
plot(df$weight,df$height)
# lm(y~x) wir wollen y vermuten. oder y ist Target variable
# lm(x~y) wir wollen x vermuten. oder x ist Target variable
lm(df$weight~df$height)
# lm(y~x) wir wollen y vermuten. oder y ist Target variable
# lm(x~y) wir wollen x vermuten. oder x ist Target variable
model<-lm(df$weight~df$height)
model
model$coefficients
a<-model$coefficients[1]
b<-model$coefficients[2]
a;b
heigh<-1.3
weight = a + b*height
height<-1.3
weight = a + b*height
weight
plot(df$weight,df$height)
abline(a,b)
abline(lm(model))
abline(lm(df$weight~df$height))
plot(df$weight,df$height)
abline(lm(df$weight~df$height))
abline(lm(df$weight~df$height))
dev.off()
plot(df$weight,df$height)
abline(lm(df$weight~df$height))
abline(model)
abline(model,col='red')
plot(df$weight,df$height,xlab = 'x')
plot(df$weight,df$height)
abline(model,col='red')
a;b
table(df$gender,df$bmi.category)
table(df$gender,df$bmi.category)
table(df$gender,df$bmi.category) %>% addmargins()
table(df$gender,df$bmi.category) %>% addmargins()
plot(c(1:30),dnorm(1:30,mean=123,sd=15))
plot(c(1:30),dnorm(1:30,mean=123,sd=15))
plot(seq(-1,10,1),dnorm(1:30,mean=123,sd=15))
plot(seq(-1,10,1),dnorm(seq(-1,10,1),mean=123,sd=15))
# mitte -> 0.95
# linke + rechte seite 0.05
# linke seite 0.05/2
# rechte seite 0.05/2
# für lower bound
qnorm(0.05/2,mean=123,sd=15)
upper_bound<-qnorm(0.05/2+0.95,mean=123,sd=15)
lower_bound;upper_bound
# mitte -> 0.95
# linke + rechte seite 0.05
# linke seite 0.05/2
# rechte seite 0.05/2
# für lower bound
lower_bound<-qnorm(0.05/2,mean=123,sd=15)
upper_bound<-qnorm(0.05/2+0.95,mean=123,sd=15)
lower_bound;upper_bound
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123,sd=15)
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=15*4)
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=sqrt(15*4))
# What is the probability that a 4 person household consumes more than 550 l
# of water per day?
# P(X>550)
1-pnorm(550,mean=123*4,sd=(15*4))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
getwd()
setwd('/home/jrana/')
exp <- 1000*p
knitr::opts_chunk$set(echo = TRUE)
x<-c(1:20)
boxplot(x)
# d)
1-pnorm(100, 10, 20)
# e)
qnorm(0.9, 20, 20
# d)
1-pnorm(100, 10, 20)
# e)
qnorm(0.9, 20, 20)
knitr::opts_chunk$set(echo = TRUE)
boxplot(pressure$temperature)
boxplot(pressure$temperature,horizontal = T)
plot(pressure$temperature,pressure$pressure)
plot(pressure$temperature,pressure$pressure,col='red')
plot(pressure$temperature,pressure$pressure,col='blue')
p<-0.7
alpha<-1-0.95
p<-0.7
alpha<-1-0.95
m.e<-0.02
n<- ( (1-p)*p  )/( (m.e) / qnorm(1-alpha) )**2
n
ceiling(n)
u<-0.75
l<-0.64
alpha<-1-0.95
p<-0.7
conf.len<-u-l
n<- (1-p)*p / ( conf.len/2*qnorm(1-alpha/2) )**2
n
ceiling(n)
n<- (1-p)*p / ( conf.len/(2*qnorm(1-alpha/2)) )**2
ceiling(n)
u<-0.7568
l<-0.6432
alpha<-1-0.95
p<-0.7
conf.len<-u-l
n<- (1-p)*p / ( conf.len/(2*qnorm(1-alpha/2)) )**2
ceiling(n)
# interval length is given. calculate alpha ?
# interval len = upper_bound - lower_bound
library(tidyverse)
alpha_div_2<-1-pnorm(  conf.len/ sqrt( (p*(1-p))/n  )   )
alpha_div_2/2
alpha_div_2<-1-pnorm(  conf.len/ (2*sqrt( (p*(1-p))/n  ))   )
alpha_div_2/2
alpha_div_2<-1-pnorm(  conf.len/ (2*sqrt( (p*(1-p))/n  ))   )**2
alpha_div_2/2
alpha_div_2<-1-pnorm(  conf.len/ (2*sqrt( (p*(1-p))/n  ))   )
alpha_div_2/2
alpha_div_2
alpha_div_2<-1-pnorm(  conf.len/ (2*sqrt( (p*(1-p))/n  ))   )
alpha_div_2
#  0.025=alpha/2
# alpha=0.02*2
alpha<-alpha_div_2*2
alpha
(1-alpha)*100
u.b<-p-qnorm(1-alpha/2)*sqrt( ((1-p)*p)/n)
u.b
u.b<-p-qnorm(1-alpha)*sqrt( ((1-p)*p)/n)
u.b<-p+qnorm(1-alpha)*sqrt( ((1-p)*p)/n)
u.b
binom.test(x=m,n=n,p=m/m,alternative = 'lower',conf.level = 0.95)
binom.test(x=m,n=n,p=m/m,alternative = 'less',conf.level = 0.95)
m<-12
alpha<-1-0.95
binom.test(x=m,n=n,p=m/m,alternative = 'less',conf.level = 0.95)
binom.test(x=m,n=n,p=m/n,alternative = 'less',conf.level = 0.95)
binom.test(x=m,n=n,alternative = 'less',conf.level = 0.95)
n<-200
m<-12
p<-m/n
alpha<-1-0.95
binom.test(x=m,n=n,alternative = 'less',conf.level = 0.95)
u.b<-p+qnorm(1-alpha)*sqrt( ((1-p)*p)/n)
u.b
result<-binom.test(x=m,n=n,alternative = 'less',conf.level = 0.95)
result$statistic
result$conf.int
result$conf.int[1]
result$conf.int[2]
setwd('/home/jrana/newHome/statistics/exam_preparation/ws21')
df<-read_csv('melanoma.csv') %>% as_tibble()
df
table(df$status,df$sex)
table(df$status,df$sex) %>% addmargins()
df
df %>% head(5)
str(df)
df$year %>% count()
df$year %>% count(year)
df %>% count(year)
df %>% count(year)->tmp
tmp
names(tmp)
barplot(tmp$n,names.arg = tmp$year)
barplot(tmp$n,names.arg = tmp$year)
barplot(tmp$n,names.arg = tmp$year,horiz = T)
barplot(tmp$n,names.arg = tmp$year,horiz = F)
barplot(tmp$n,names.arg = tmp$year,horiz = F,angle = 45)
tmp
df
summarise(df$thickness)
summarise(df$thickness %>% as.double())
str(df)
mean(df$thickness)
plot(df$thickness,df$age)
plot(df$thickness,df$age,col='red')
plot(df$thickness,df$age,col='red')
plot(df$thickness,df$age,col='green')
df
boxplot(df$thickness~df$ulcer)
boxplot(df$thickness~df$ulcer,horizontal = T)
boxplot(df$thickness~df$sex,horizontal = T)
plot(df$thickness,df$sex)
plot(df$thickness,df$ulcer)
plot(df$thickness,df$status)
boxplot(df$thickness~df$status,horizontal = T)
print("yo")
print("yo")->x
x
typeof(x)
rm(x)
